using System;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL4;
using OpenTK.Input;

namespace TheMoveToCSharp
{
    public class Display
    {
        private const float STARTING_BLUE = 0.3f;
        private const float STARTING_RED = 0.0f;
        private int _loopCount = 0;
        private readonly float _blue;
        private readonly GameWindow _gameWindow;
        private readonly float _red;
        public int Height { get; private set; }
        public int Width { get; private set; }

        public Display(int width, int height)
        {
            Width = width;
            Height = height;

            _gameWindow = new GameWindow(Width, Height, GraphicsMode.Default);

            _gameWindow.Title = "Moving to CSharp Window";

            _gameWindow.UpdateFrame += OnUpdateFrame;
            _gameWindow.RenderFrame += OnRenderFrame;
            _gameWindow.Load += OnLoad;
            _gameWindow.Resize += OnResize;

            _red = STARTING_RED;
            _blue = STARTING_BLUE;
        }

        public void Run()
        {
            _gameWindow.Run(60, 60);
        }

        private void DetermineBackGroundColor()
        {
            GL.BindFramebuffer(FramebufferTarget.Framebuffer, 0);

            GL.ClearColor(_red, 0.14f, _blue, 1.0f);
        }

        private void OnLoad(object sender, EventArgs e)
        {
            _gameWindow.VSync = VSyncMode.On;
        }

        private void OnRenderFrame(object sender, FrameEventArgs e)
        {
            _loopCount++;

            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            DetermineBackGroundColor();

            _gameWindow.SwapBuffers();
        }

        private void OnResize(object sender, EventArgs e)
        {
            GL.Viewport(0, 0, _gameWindow.Width, _gameWindow.Height);
        }

        private void OnUpdateFrame(object sender, FrameEventArgs e)
        {
            if (_gameWindow.Keyboard[Key.Escape]) _gameWindow.Exit();
        }
    }
}